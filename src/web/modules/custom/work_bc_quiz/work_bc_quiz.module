<?php

/**
 * @file
 * Work BC Quiz module performs various Quiz related tasks including.
 * Create Double Reference field. Auto Title of the quiz nodes
 * Custom Page view, and Views view creation, Quiz Scoring.
 */

use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\forms_steps\Form\FormsStepsAlter;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\work_bc_quiz\Controller\WorkBcQuizController;
use Drupal\ultimate_cron\Entity\CronJob;

/**
 * Attach work-bc-lib Library to use css and JS fiels.
 */
function work_bc_quiz_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['library'][] = 'work_bc_quiz/work-bc-lib';
}

/**
 * Call Templates using _theme hook.
 */
function work_bc_quiz_theme($existing, $type, $theme, $path) {
  return [
    'page__abilities_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'page__quiz__abilities_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'node__abilities_quiz_full' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'node__abilities_quiz' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'page__work_preferences_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'page__quiz__work_preferences_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'node__work_preferences_quiz_full' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'node__work_preferences_quiz' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'page__interests_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'page__quiz__interests_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'node__interests_quiz_full' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'node__interests_quiz' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'page__multiple_intelligences_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'page__quiz__multiple_intelligences_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'node__multiple_intelligences_quiz_full' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'node__multiple_intelligences_quiz' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'page__learning_styles_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'page__quiz__learning_styles_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'node__learning_styles_quiz_full' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'node__learning_styles_quiz' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'page__work_values_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'page__quiz__work_values_quiz' => [
      'template' => 'page--quiz-custom-template',
      'base hook' => 'page',
    ],
    'node__work_values_quiz_full' => [
      'template' => 'node--custom-quiz-full-template',
      'base hook' => 'node',
    ],
    'node__work_values_quiz' => [
      'template' => 'node--work-values-quiz--full-template',
      'base hook' => 'node',
    ],
    'page_title__work_bc_quiz' => [
      'template' => 'page-title--work-bc-quiz',
      'base hook' => 'page_title',
    ],
    'views_view__quiz__page_1' => [
      'template' => 'views-view--quiz-page-1',
      'base hook' => 'view',
    ],
    'views_view_unformatted__career_quizzes' => [
      'template' => 'views-unformatted--career_quizzes-block-1',
      'base hook' => 'view',
    ],
    'views_bootstrap_grid__career_quizzes' => [
      'template' => 'views-bootstrap-grid--quiz-block-1',
      'base hook' => 'views',
    ],
    'node_edit_form' => [
      'render element' => 'form',
      'template' => 'node_edit_form',
      'base hook' => 'node_edit_form',
    ],
    'views_view_unformatted__step_form_pagination' => [
      'template' => 'views-view-unformatted--step_form_pagination--block-1',
      'base hook' => 'view',
    ],
    'block__forms_steps_progress_bar' => [
      'template' => 'block--forms-steps-progress-bar',
      'base hook' => 'block',
    ],
  ];
}

/**
 * Hook theme_suggestions_page_alter.
 */
function work_bc_quiz_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($view = \Drupal::routeMatch()->getParameter('view_id')) {
    $display_id = \Drupal::routeMatch()->getParameter('display_id');
    $suggestions[] = 'page__' . $view . '--' . $display_id;
  }
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle() . '_' . $node->id();
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Template suggestion for page title template - To add description below title.
 */
function work_bc_quiz_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  if (empty($variables['header'])) {
    $suggestions[] = 'page_title__work_bc_quiz';
  }
}

/**
 * Add title default value in title Input box
 * Default title Value for each quiz content type
 * Add all other quiz content type names into the array.
 *
 */
function work_bc_quiz_form_node_form_alter(&$form, $formState, $form_id) {
  $node = $formState->getFormObject()->getEntity();
  $quizTypes = new WorkBcQuizController();
  $quizTypes = $quizTypes->getQuizTypes();
  
  if (!$node->isNew() && in_array($node->bundle(), $quizTypes)) {
    $form['web_submission'] = [
      '#type' => 'hidden',
      '#value' => \Drupal::csrfToken()->get($node->id()),
    ];
  }
  $nodeTypeToPreventEdit = [
    'node_abilities_quiz_edit_form', 
    'node_work_preferences_quiz_edit_form',
    'node_interests_quiz_edit_form',
    'node_multiple_intelligences_quiz_edit_form',
    'node_learning_styles_quiz_edit_form',
    'node_work_values_quiz_edit_form',
    ];
  
  if(in_array($form_id, $nodeTypeToPreventEdit)){ 
    $current_user = \Drupal::currentUser();
    $user=\Drupal\user\Entity\User::load($current_user->id());
    if(!$user->hasRole("administrator")){
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  
  $nodeTypeToHideTitle = [
    "abilities_quiz",
    "abilities_quiz_step_1",
    "work_preferences_quiz",
    "work_preferences_quiz_step_1",
    "interests_quiz",
    "interests_quiz_step_1",
    "multiple_intelligences_quiz",
    "multiple_intelligences_quiz_step_1",
    "learning_styles_quiz",
    "learning_styles_quiz_step_1",
    "work_values_quiz",
    "work_values_quiz_step_1",
  ];
  $form_id = str_replace(["node_", "_form"], [''], $form_id);
  if (in_array($form_id, $nodeTypeToHideTitle)) {
    $form['#attributes']['class'][] = 'summary-quiz-form';
    $form['title']['widget'][0]['value']['#value'] = ucwords(str_replace("_", " ", $form_id));
    $form['title']['widget'][0]['#attributes']['class'] = ['wrapper-class'];
  }
  if (str_contains($form_id, '_preview')) {
    $nid = $formState->getformObject()->getEntity()->id();
    $query = \Drupal::database()->select('node', 'n')->fields('n', ['type'])->condition('n.nid', $nid)->execute();
    $result = $query->fetchObject();

    $query = \Drupal::database()->select(
      'forms_steps_workflow', 'n')->fields('n', ['type'])
      ->condition("n.forms_steps", $result->type)
      ->condition('n.entity_id', $nid);
    $num_rows = $query->countQuery()->execute()->fetchField();

    $last_page = ceil($num_rows / 2);
    $form['actions']['#prefix'] = '<div class="preview-quiz-form" id="action_wrapper">';
    /*$form['actions']['#suffix'] = '</div>'; */

    $form['actions']['previous']['#submit'][] = '_work_bc_quiz_node_form_submit_previous';
    $form['actions']['previous']['#weight'] = 1;
    /*$form['actions']['previous']['#attributes']['id'][] = 'edit-previous';
    $form['actions']['previous']['#attributes']['name'][] = 'previous-action'; */

    $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $result->type);
    $total_fields = 0;
    foreach ($fields as $field_definition) {
      if (!empty($field_definition->getTargetBundle())) {
        if ($field_definition->getType() == "work_bc_quiz") {
          $total_fields++;
        }
      }
    }

    $pages = ceil($total_fields / 10);
    for ($i = 1; $i <= $pages; $i++) {
      // Start wrapper; Current page condition.
      if (str_contains($form_id, "step_$i")) {
        $form['actions']['step' . $i] = [
          '#type' => 'submit',
          '#title' => $i,
          '#value' => $i,
          '#submit' => ['_work_bc_quiz_node_form_pagination_handler'],
          '#weight' => 1,
        ];
        $form['actions']['step' . $i]['#attributes'] = ['class' => ["page-item page_$i $form_id"]];
        $form['actions']['step' . $i]['#attributes']['disabled'] = "disabled";
        $form['actions']['step' . $i]['#attributes']['class'] = ["page-item page_$i active"];
      }
    }

    // Hide next button on last step.
    if (!str_contains($form_id, "step_$last_page")) {
      $form['actions']['next'] = [
        '#type' => 'submit',
        '#title' => t('Next'),
        '#value' => t('Next >'),
        '#submit' => ['_work_bc_quiz_node_form_submit_next'],
        '#weight' => 3,
      ];
      $form['actions']['next']['#attributes']['class'][] = 'button button--primary js-form-submit form-submit btn btn-primary form-next';
      // $form['actions']['next']['#attributes']['id'][] = 'edit-next';
      // $form['actions']['next']['#attributes']['name'][] = 'edit-next';
    }
    $form['actions']['m_cancel'] = [
      '#type' => 'submit',
      '#title' => t('Cancel'),
      '#value' => t('Cancel'),
      '#submit' => ['_work_bc_quiz_node_form_submit_cancel'],
      '#weight' => 6,
    ];
    $form['actions']['m_cancel']['#attributes']['class'][] = 'button js-form-cancel form-submit cancel-btn';
    $form['actions']['m_cancel']['#attributes']['id'][] = 'edit-m-cancel';
    $form['actions']['m_cancel']['#prefix'] = '</div><div class="cancel-wrapper save-cancel" >';
    $form['actions']['m_cancel']['#suffix'] = '</div>';

    $form['actions']['submit']['#submit'][] = '_work_bc_quiz_custom_submit_handler';
    $form['actions']['submit']['#attributes']['class'][] = 'button js-form-submit form-submit btn btn-primary save-changes';
    $form['actions']['submit']['#prefix'] = '<div class="save-wrapper save-cancel" >';
    $form['actions']['submit']['#suffix'] = '</div>';
    $form['actions']['submit']['#weight'] = 7;

    $form['actions']['previous']['#submit'][] = '_work_bc_quiz_node_form_submit_previous';
    $form['actions']['previous']['#value'] = t('< Previous');
  }
  else {
    $session = \Drupal::request()->getSession();
    if($session->get('SavedQuiz')){
      $SavedQuiz = $session->get('SavedQuiz');
      foreach($SavedQuiz as $key => $value){
        //print $key;
        $node_title =  str_replace("save_quiz_", "", $key);
        $node_title = explode("_", $node_title);
        array_pop($node_title);
        $node_title = implode("_",$node_title);
        $current_path = \Drupal::service('path.current')->getPath();
        $current_path_array = explode('/', $current_path);
        $current_path_last_element = end($current_path_array);

        if(str_contains($form_id, $node_title) && in_array('step1', $current_path_array) && $current_path_last_element == 'step1'){
          $query = \Drupal::database()->select('node', 'n')->fields('n', ['nid']);
          $query->condition('n.uuid', $value->uuid);
          $nid = $query->execute()->fetchField();

          $query = \Drupal::database()->select('forms_steps_workflow', 'n')->fields('n', ['id', 'instance_id'])->condition('n.entity_id', $nid)->range(0, 1)->execute();
          $result = $query->fetchObject();
          $instance_id = $result->instance_id;
          $path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
          $target_url = \Drupal::service('path.validator')->getUrlIfValid($path);
          $target_route_name = $target_url->getRouteName();
          $target_route_parameters = $target_url->getrouteParameters();
          $target_route_parameters['instance_id'] = $instance_id;
          $response = new RedirectResponse(\Drupal\Core\Url::fromRoute($target_route_name, $target_route_parameters)->toString());
          #$response = new RedirectResponse(\Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString());
          $response->send();
        }
      }
    }
  }
  if (str_contains($form_id, '_step')) {
    // unset($form['actions']['previous']['#limit_validation_errors']);.
    $form['actions']['previous']['#submit'][] = '_work_bc_quiz_node_form_submit_previous';
  }
}

/**
 * Set default value of title before saving node, If title not set in
 * Saves node title to session.
 * HOOK_form_node_form_alter.
 *
 * @todo Save Content type in an array - and use that to avoid Switch statements
 */
function work_bc_quiz_entity_presave(EntityInterface $entity) {
  // Call drupal session class.
  $session = \Drupal::request()->getSession();
  $saveToSession = FALSE;
  $autoTitle = "";
  // Add all other quiz type in switch case.
  $nodeTypeToHideTitle = [
    "abilities_quiz",
    "work_preferences_quiz",
    "interests_quiz",
    "multiple_intelligences_quiz",
    "learning_styles_quiz",
    "work_values_quiz",
  ];
  if (in_array($entity->bundle(), $nodeTypeToHideTitle)) {
    $autoTitle = ucwords(str_replace("_", " ", $entity->bundle()));
    $entity->setTitle($autoTitle . " - Results");
    // Session trigger.
    $saveToSession = TRUE;
  }

  // If session trigger is true we will save the node title into session
  // array to prevent multiple instances of a quiz per user.
  if ($saveToSession == TRUE) {
    $savedQuiz = ($session->get('SavedQuiz')) ? $session->get('SavedQuiz') : '';

    // Check if sessions array is already exists.
    if (!is_array($savedQuiz)) {
      $savedQuiz = [];
    }
    // $savedQuiz1 = [];
    $i = 0;

    // If node title already exists in sessions array, than break the loop and
    // increase the counter to prevent adding node title to sessions array.
    foreach ($savedQuiz as $key => $value) {
      $arguments = explode('_', $key);
      $arguments = end($arguments);

      $arguments = $value->uuid;

      // if($value['title'] == $autoTitle) $i++; break;.
      if ($arguments == $entity->uuid()) {
        $i++;
      } break;
    }

    // Check if count is 0 => quiz not created yet for this user,
    // add node into sessions array.
    if ($i == 0) {
      $key = 'save_quiz_' . $entity->bundle() . "_A100";
      $new_quiz = new stdClass();
      $new_quiz->uuid = $entity->uuid();
      $new_quiz->user = 'owner';
      $new_quiz->result = [];
      
      $savedQuiz[$key] = $new_quiz;
      $session->set('SavedQuiz', $savedQuiz);
    }
  }
}

/**
 * Adds title_description text in the view mode of all thee of the quiz pages.
 *  01. Node view of the quiz
 *  02. Questions pages
 *  03. Summary pages of the quiz.
 */
function work_bc_quiz_preprocess(&$variables) {
  $site_settings = \Drupal::service('site_settings.loader');
  $settings = $site_settings->loadAll();
  $settings = $settings['quiz_list_association']['quiz_list_association'];

  $details_nid = 0;

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->bundle() == 'abilities_quiz') {
      $details_nid = $settings['field_abilities_quiz_list_node_i'];
    }
    elseif ($node->bundle() == 'work_preferences_quiz') {
      $details_nid = $settings['field_work_preferences_quiz_list'];
    }
    elseif ($node->bundle() == 'interests_quiz') {
      $details_nid = $settings['field_interests_quiz_list_node_i'];
    } 
    elseif ($node->bundle() == 'multiple_intelligences_quiz') {
      $details_nid = $settings['field_multiple_intelligences_qui'];
    }
    elseif ($node->bundle() == 'learning_styles_quiz') {
      $details_nid = $settings['field_learning_styles_quiz_list_'];
    }
    elseif ($node->bundle() == 'work_values_quiz') {
      $details_nid = $settings['field_work_values_quiz_list_node'];
    }
    $cron_setting = $site_settings->loadAll();
    $quizLifespanHours = (isset($cron_setting['cron_settings']['cron'])) ? $cron_setting['cron_settings']['cron'] : 24;
    $hid = 24;
    $days = round($quizLifespanHours / $hid);

    $email_subject = t("WorkBC's Career Discovery Quizzes - @quiztype results", [
      "@quiztype" => $node->type->entity->label(),
    ]);
    $options = ['absolute' => TRUE];
    $current_url = Url::fromRoute('<current>', [], $options);
    $front_url = Url::fromRoute('<front>', [], $options);
    $email_body = t("View your @quiztype results: @quizlink
                    \nYour result are available for next @duration. print or download to save your results.
                    \nDiscover more! Complete other career and personality quizzes and find a career path that's right for you. Career Discovery Quizzes: @front\nFind more resources on careers, funding, education and finding jobs at WorkBC.ca.", [
                      "@quiztype" => $node->type->entity->label(),
                      "@duration" => $days < 0 ? $days . ' Hours' : $days . ' days',
                      "@quizlink" => $current_url->toString(),
                      "@front" => $front_url->toString(),
                    ]);
    $variables['quiz_result_email_subject'] = $email_subject;
    $variables['quiz_result_email_body'] = $email_body;

  }
  else {
    $path = \Drupal::request()->getpathInfo();
    $arg = explode('/', $path);
    // If page is not node, check url and added title_description for the page.
    if (isset($arg[1]) && isset($arg[2])  && $arg[1] == 'quiz') {
      if (($arg[2] == 'abilities_quiz')||($arg[2] == 'abilities-quiz')) {
        $details_nid = $settings['field_abilities_quiz_list_node_i'];
      }
      elseif ($arg[2] == 'work-preferences-quiz') {
        $details_nid = $settings['field_work_preferences_quiz_list'];
      }
      elseif ($arg[2] == 'interests-quiz') {
        $details_nid = $settings['field_interests_quiz_list_node_i'];
      }
      elseif ($arg[2] == 'multiple-intelligences-quiz') {
        $details_nid = $settings['field_multiple_intelligences_qui'];
      }
      elseif ($arg[2] == 'learning-styles-quiz') {
        $details_nid = $settings['field_learning_styles_quiz_list_'];
      }
      elseif ($arg[2] == 'work-values-quiz') {
        $details_nid = $settings['field_work_values_quiz_list_node'];
      }
    }
  }

  if ($details_nid > 0) {
    $node_details = Node::load($details_nid);
    // Quiz View Display =  Results Page.
    if (\Drupal::routeMatch()->getParameter('node')) {
      $variables['description'] = $node_details->field_quiz_results_page_descript->value;
      $variables['subheading'] = $node_details->field_quiz_results_page_subheadi->value;
      $variables['subheading_toggle'] = $node_details->field_quiz_results_toggle_subhea->value;
      $variables['toggle_plus'] = $node_details->field_quiz_results_toggle_plus->value;
      $variables['toggle_minus'] = $node_details->field_quiz_results_toggle_minus->value;
    }
    elseif (isset($arg[4]) && $arg[4] == 'preview') {
      $variables['description'] = $node_details->field_quiz_summary_page_descript->value;
    }
    // Quiz Form Display.
    else {
      $variables['description'] = $node_details->field_quiz_page_description->value;
      // "39";
      $variables['question'] = $node_details->field_number_of_questions_text->value;
      // "10";
      $variables['time'] = $node_details->field_quiz_duration->value;
    }
  }
}

/*
 * Node view is for quiz's results page.
 * All categories and their scores showing on the results page
 * are altered in this hook.
 */



/**
 * {@inheritdoc}
 */
function work_bc_quiz_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $session = \Drupal::request()->getSession();
  $savedQuiz = ($session->get('SavedQuiz')) ? $session->get('SavedQuiz') : '';

  // Filter which Content Types would use this node view.
  $node = $entity;
  // $all_quizes = ['abilities_quiz', 'multiple_intelligences_quiz'];
  if ($node->bundle() === 'abilities_quiz' || $node->bundle() === 'work_preferences_quiz' || $node->bundle() === 'interests_quiz' || $node->bundle() === 'multiple_intelligences_quiz' || $node->bundle() === 'learning_styles_quiz' || $node->bundle() === 'work_values_quiz') {
    $build['#cache']['max-age'] = 0;
    // 'quiz' mode isn't active yet
    if ($view_mode === 'full' || $view_mode === 'quiz') {

      // Get all machine names of fields to retrieve all the
      // question in $fields array.
      $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $node->bundle());

      // Get all QUIZ_options of this quiz node
      // (i.e. from one of the abilities_options,
      // multiple_intelligence_options etc.), and
      // save them into $options_value array for later use.
      $temp_to_replace = [
        "work_preferences_quiz",
        "interests_quiz",
        "multiple_intelligences_quiz",
        "learning_styles_quiz",
        "work_values_quiz",
        "_quiz",
      ];
      $temp_replace_by = [
        "work_preferences_options",
        "interests_options",
        "multiple_intelligence_options",
        "learning_styles_options",
        "work_values_options",
        "_options",
      ];
      $vid = str_replace($temp_to_replace, $temp_replace_by, $node->bundle());
      // $vid = str_replace("_quiz", "_options", $node->bundle());
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
      $max_value = 0;
      $options_value = [];
      $quizError = 0;
      $nextlink = '';
      foreach ($terms as $term) {
        $term_obj = Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term->tid);
        $options_value[$term->tid]['name'] = $term->name;
        $options_value[$term->tid]['description'] = (isset($term->description))? $term->description: '';
        $options_value[$term->tid]['tid'] = $term->tid;
        $options_value[$term->tid]['field_option_percentage'] = $term_obj->get('field_option_percentage')->value;
        // Compare max value with next term score and
        // find out the largest score.
        if ($max_value < $term_obj->get('field_option_percentage')->value[0]) {
          $max_value = $term_obj->get('field_option_percentage')->value;
        }
      }

      // Get all QUIZ_categories of this quiz node(i.e. from one of the abilities_categories, multiple_intelligence_categories etc.), and save them into $category_value array for later use.
      $temp_to_replace = [
        "work_preferences_quiz",
        "interests_quiz",
        "multiple_intelligences_quiz",
        "learning_styles_quiz",
        "work_values_quiz",
        "_quiz",
      ];
      $temp_replace_by = [
        "work_preferences_categories",
        "interests_categories",
        "multiple_intelligence_categories",
        "learning_styles_categories",
        "work_values_categories",
        "_categories",
      ];
      $vid = str_replace($temp_to_replace, $temp_replace_by, $node->bundle());
      // print_R($vid);
      // $vid = str_replace("_quiz", "_categories", $node->bundle());
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
      $category_value = [];
      foreach ($terms as $term) {
        $term_obj = Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term->tid);
        $category_value[$term->tid]['name'] = $term->name;
        $category_value[$term->tid]['weight'] = $term->weight;
        $category_value[$term->tid]['description'] = $term->description__value;
        $category_value[$term->tid]['tid'] = $term->tid;
        $category_value[$term->tid]['field_svg_icon'] = $term_obj->get('field_svg_icon')->entity->uri->value;
        $category_value[$term->tid]['color'] = $term_obj->get('field_color')->value;
      }
      $groupedResult = [];
      // Loop through all fields of the node.
      if ($node->bundle() === 'work_values_quiz') {
        foreach ($fields as $field_name => $field_definition) {
          if (!empty($field_definition->getTargetBundle())) {
            // Process only if the field type is Double Reference.
            // work_bc_quiz == Double reference field.
            if ($field_definition->getType() == "work_bc_quiz") {

              // Get answer for the value and then percentage and category names from answers.
              $answer = $node->get($field_name)->getValue();
              if ((empty($answer[0]['ar_target_id']))&&($quizError == 0)) {
                $quizError++;
              }
              $option_id = $answer[0]['ar_target_id'];
              $field_option_percentage = $options_value[$option_id]['field_option_percentage'];
              $field_option_value = $options_value[$option_id]['name'];

              $category_id = $answer[0]['target_id'];
              $category_name = $category_value[$category_id]['name'];
              $category_weight = $category_value[$category_id]['weight'];

              // @todo Run fewer times (Low priority)
              $category_color = $category_value[$category_id]['color'];
              $category_svg = $category_value[$category_id]['field_svg_icon'];
              $category_description = $category_value[$category_id]['description'];

              if (array_key_exists($category_name, $groupedResult)) {
                if (array_key_exists($field_option_percentage, $groupedResult[$category_name]['option'])) {
                  array_push($groupedResult[$category_name]['option'][$field_option_percentage]['values'], $field_definition->label());
                }
                else {
                  $groupedResult[$category_name]['option'][$field_option_percentage]['key'] = $field_option_value;
                  $groupedResult[$category_name]['option'][$field_option_percentage]['index'] = $field_option_percentage;
                  $groupedResult[$category_name]['option'][$field_option_percentage]['values'] = [$field_definition->label()];
                }
              }
              else {
                // If category is different, then add into an array.
                $groupedResult[$category_name]['option'][$field_option_percentage]['key'] = $field_option_value;
                $groupedResult[$category_name]['option'][$field_option_percentage]['index'] = $field_option_percentage;
                $groupedResult[$category_name]['option'][$field_option_percentage]['values'] = [$field_definition->label()];
                $groupedResult[$category_name]['name'] = $category_name;
                $groupedResult[$category_name]['weight'] = $category_weight;
                $groupedResult[$category_name]['icon'] = $category_svg;
                $groupedResult[$category_name]['description'] = $category_description;

                $name_a = explode(" ", $category_name);
                $shortname = '';
                foreach ($name_a as $name_v) {
                  $shortname .= strtolower(substr($name_v, 0, 1));
                }
                $groupedResult[$category_name]['short'] = $shortname;
              }

            }
          }
        }
      }
      else {
        foreach ($fields as $field_name => $field_definition) {
          if (!empty($field_definition->getTargetBundle())) {
            // Process only if the field type is Double Reference.
            // work_bc_quiz == Double reference field.
            if ($field_definition->getType() == "work_bc_quiz") {

              // Get answer for the value and then percentage and category names from answers.
              $answer = $node->get($field_name)->getValue();
              if ((empty($answer[0]['ar_target_id']))&&($quizError == 0)) {
                $quizError++;
              }
              $option_id = $answer[0]['ar_target_id'];
              $field_option_percentage = $options_value[$option_id]['field_option_percentage'];
              $category_id = $answer[0]['target_id'];
              $category_name = $category_value[$category_id]['name'];
              $category_weight = $category_value[$category_id]['weight'];
              // @todo Run fewer times (Low priority)
              $category_color = $category_value[$category_id]['color'];
              $category_svg = $category_value[$category_id]['field_svg_icon'];
              $category_description = $category_value[$category_id]['description'];

              if (array_key_exists($category_name, $groupedResult)) {
                // IF category is same put score into an array and pass.
                array_push($groupedResult[$category_name]['score'], $field_option_percentage);
              }
              else {
                // If category is different, then add into an array.
                $groupedResult[$category_name]['score'] = [$field_option_percentage];
                $groupedResult[$category_name]['name'] = $category_name;
                $groupedResult[$category_name]['weight'] = $category_weight;
                $groupedResult[$category_name]['highest'] = $max_value;
                $groupedResult[$category_name]['icon'] = $category_svg;
                $groupedResult[$category_name]['color'] = $category_color;
                $groupedResult[$category_name]['description'] = $category_description;
                $name_a = explode(" ", $category_name);
                $shortname = '';
                foreach ($name_a as $name_v) {
                  $shortname .= strtolower(substr($name_v, 0, 1));
                }
                $groupedResult[$category_name]['short'] = $shortname;
              }

            }
          }
        }
        // print("~~~".$node->bundle()."~~");
        // Calculate the percentage value for each option.
        $forCareermatch = [];
        $normalized = 0;
        foreach ($groupedResult as $key => $value) {
          if(!empty($value['score'])){
            $max_total = count($value['score']) * $value['highest'];
            $percentage = round((array_sum($value['score']) / $max_total) * 100);
            $groupedResult[$key]['percentage'] = $percentage;
            $normalized = floor((($percentage / 100) * 4) + 1);
            $forCareermatch[$value['short']] = $normalized;
          }
        }

        // Sort data using usort php function.
        usort($groupedResult, fn($b, $a) => ($a['percentage'] - $b['percentage']));
      }
      // Get uuid from node table.
      $uuid = $node->get('uuid')->getValue()[0]['value'];

      // Get link to update the node, using uuid.
      $query = \Drupal::database()->select('node', 'n')
        ->fields('sf', ['instance_id', 'entity_id']);
      $query->leftJoin('forms_steps_workflow', 'sf', 'sf.entity_id = n.nid');
      $query->condition('n.uuid', $uuid);
      $results = $query->execute()->fetchAll();
      $instance_id = $results[0]->instance_id;

      $entity_id = $results[0]->entity_id;
      $quizLink = $node->bundle();
      if ($quizLink !== "abilities_quiz") {
        $quizLink = str_replace("_", "-", $quizLink);
      }

      if($node->bundle() === 'work_preferences_quiz'){

        usort($groupedResult, '_work_bc_quiz_usort3');

        $top_three = [];
        $values = [];
        
        foreach( $groupedResult as $key => $value){
          $i = $key+1;
          $values[$i] = $value['name'];
          $top_three[$i] = $value['name'][0];
        }
        $combinitations = [
                            [1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1],
                            [1,2,4],[1,4,2],[2,1,4],[2,4,1],[4,1,2],[4,2,1],
                            [1,2,5],[1,5,2],[2,1,5],[2,5,1],[5,1,2],[5,2,1]
                          ];
        $top_codes = [];
        foreach($combinitations as $key => $value){
          for($j=0;$j<3;$j++){
            $code = '';
            foreach($combinitations[$key] as $i => $index){
              switch($j){
                case 1:
                  if($i == 2){
                    $code .= strtolower($top_three[$index]);
                  }else {
                    $code .= $top_three[$index];
                  }
                break;
                case 2:
                  if($i == 1 || $i == 2){
                    $code .= strtolower($top_three[$index]);
                  }else {
                    $code .= $top_three[$index];
                  }
                break;
                default:
                  $code .= $top_three[$index];
                break;
              }
            }
            array_push($top_codes, $code);
          }
        }
      }
      if ($quizError) {
        $query = \Drupal::database()->select('node', 'n')
          ->fields('sf', ['instance_id', 'entity_id']);
        $query->leftJoin('forms_steps_workflow', 'sf', 'sf.entity_id = n.nid');
        $query->condition('n.nid', $node->id());
        $results = $query->execute()->fetchAll();

        $instance_id = $results[0]->instance_id;
        $entity_id = $results[0]->entity_id;
        $step = count($results) + 1;

        $quizType = str_replace(['_'], ["-"], $node->bundle());
        $nextlink = "/quiz/" . $quizType . "/step" . $step . "/" . $instance_id;
      }
      
      if($node->bundle() == 'interests_quiz'){
        $base_path = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
        //$occupations = [];
        $occupation = ''; 
        foreach($groupedResult as $value){
          $value['name'] = str_replace(' ', '%20',$value['name']);
          //$occupations[$value['name']] = []; 
          $scoreTotal = 0;
          foreach($value['score'] as $score){
            $scoreTotal += ++$score;
          }
          //$occupations[$value['name']] = $scoreTotal;
          $occupation = (empty($occupation))? $value['name'].'='.$scoreTotal : $occupation . "&".$value['name'].'='.$scoreTotal."&start=1&end=222";
        }
        
        //$newQuiz = \Drupal::service('work_bc_quiz.WorkBcQuizController')->getCareerCodes($occupation);
        $newQuiz = new WorkBcQuizController();
        $newQuiz = $newQuiz->getCareerCodes($occupation);
        // print_r($newQuiz);
        // echo "<br/>";
        $result = [];
        $great = [];
        $good = [];
        if (!empty($newQuiz) && $newQuiz['response'] == 200) {
          $newQuiz = $newQuiz['data'];
          $uri = DRUPAL_ROOT . '/' . drupal_get_path('module', 'work_bc_quiz') . '/storage/' . $node->bundle() . '.json';
          if (is_file($uri)) {
            if ($data = file_get_contents($uri, TRUE)) {
              $data = json_decode($data);
              foreach ($data as $i => $table) {
                
                foreach($newQuiz['career'] as $key => $value){
                  
                  if($value['code'] == $table->O_NET_SOC_2019){
                    if(!array_key_exists($table->NOC, $result) && !array_key_exists($table->NOC, $great) && !array_key_exists($table->NOC, $good)){
                      if(strtolower($value['fit']) == "best"){
                        $result[$table->NOC] = $value['fit'];
                      }else if(strtolower($value['fit']) == "great"){
                        $great[$table->NOC] = $value['fit'];
                      }else if(strtolower($value['fit']) == "good"){
                        $good[$table->NOC] = $value['fit'];
                      }
                    }
                    //$result[$table->NOC] = $value['fit'];
                  }
                }
                if((count($result) + count($great) + count($good)) >= 20) break;
              }
              
              foreach ($great as $key => $value){
                if(!isset($result[$key])){
                  $result[$key] = $value;
                }
              }
              foreach ($good as $key => $value){
                if(!isset($result[$key])){
                  $result[$key] = $value;
                }
              }
            }
          }
        }
      }
      else {
        // Get occupations data from the JSON file.
        try {
          // Get JSON file url.
          $uri = DRUPAL_ROOT . '/' . drupal_get_path('module', 'work_bc_quiz') . '/storage/' . $node->bundle() . '.json';
          if (is_file($uri)) {
            if ($data = file_get_contents($uri, TRUE)) {
              $data = json_decode($data);
              $result = [];
              if($node->bundle() === 'work_preferences_quiz'){
                $codes = [];
                $result = [];
                /* print_r($top_codes);
                print_r($data); */
                foreach ($top_codes as $key => $code) {
                  foreach ($data as $i => $values) {
                    $percentage = 180;
                    if(count($result) >= 20) break;
                    if($code === $values->CODE){
                      if(!array_key_exists($values->NOCCode, $result)){
                        $result[$values->NOCCode] = round((($percentage-$key)/$percentage)*100);
                      }
                    }
                  }
                }
                $i=0;
              }else {
                foreach ($data as $i => $values) {
                  $sum = 0;
                  $j = 0;
                  foreach ($values as $key => $value) {
                    if ($j > 2) {
                      $value = abs(6 - $value);
                      $sum += abs($value - $forCareermatch[$key]);
                      // $total =+ $value;
                      unset($data[$i]->$key);
                    }
                    $j++;
                  }
                  // $data[$i]->sum = $sum;
                  // $data[$i]->total = $total;
                  $data[$i]->percentage = round(((36 - $sum) / 36) * 100);
                }

                usort($data, '_work_bc_quiz_usort2');
                foreach ($data as $key => $value) {
                  if (count($result) < 20) {
                    if (!isset($result[$value->NOCCode])) {
                     $result[$value->NOCCode] = $value->percentage;
                    }
                  }
                  else {
                    break;
                  }
                }
              }
            }
          }
        }
        catch (RequestException $e) {
          return FALSE;
        }
      }
      $savedQuiz = ($session->get('SavedQuiz')) ? $session->get('SavedQuiz') : [];
      $i=0;
      
      $ownerUser = false;
      foreach ($savedQuiz as $key => $value) {
        
        if ($value->uuid == $uuid) {
          if((isset($value->user) && $value->user == 'owner')){
            $ownerUser = true;
          }
          $i++;
          $arguments = explode('_', $key);
          $arguments = end($arguments);
          if ($arguments == "A100") {
            // Assing old key values to new key
            $new_key = str_replace($arguments, $entity_id, $key);
            $savedQuiz[$new_key] = $savedQuiz[$key];
            unset($savedQuiz[$key]);
            $savedQuiz[$new_key]->uuid = $uuid;
            $savedQuiz[$new_key]->result = (isset($result))? $result:[];
          }else {
            $savedQuiz[$key]->uuid = $uuid;
            $savedQuiz[$key]->result = (isset($result))? $result: [];
          }
        }
      }
      
      if($i==0){
        $key = "save_quiz_".$node->bundle()."_".$entity_id;
        $savedQuiz[$key]->uuid = $uuid;
        $savedQuiz[$key]->result = $result;
      }
      $session->set('SavedQuiz', $savedQuiz);
      
      if($ownerUser === true){
        // Modify quiz link only for quiz owner 
        $field_value[0]['uri'] = "/quiz/$quizLink/step1/preview/" . $instance_id;
        $field_value[0]['title'] = t('Modify Your Answers');
      }
      // Next quiz link.
      // quiz/$quizLink/step1/preview/".$instance_id;.
      $field_value[1]['uri'] = "/";
      $field_value[1]['title'] = t('Take Next Quiz');
      
      $build['an_additional_field']['#quiz_error']['errors'] = $quizError;
      $build['an_additional_field']['#quiz_error']['nextlink'] = $nextlink;

      $build['an_additional_field']['#quiz_result'] = $groupedResult;
      $build['an_additional_field']['#result_link'] = $field_value;

      // $session->remove('SavedQuiz');   // Temp to Clear Session.
    }
  }
}

/**
 * Modifies two views
 * home page view
 * Step form pagination.
 */
function work_bc_quiz_views_pre_render(ViewExecutable $view) {
  // Call sessions class to show modify link, if quiz is already done.
  $session = \Drupal::request()->getSession();

  // Clear quiz session using cookie so when browser is closed, the data is not preserved.
  if (!isset($_COOKIE['quizOut'])) {
    $session->set('SavedQuiz', []);
    setcookie("quizOut", time(), 0);
  }
  if ($view->id() == 'career_quizzes') {
    // Check view idate.
    $results = $view->result;
    $filteredResults = [];

    foreach ($results as $k => $row) {
      $row->_entity->get('nid')->setValue(0, TRUE);
      $nodeTitle = $row->_entity->get('title')->value;
      // Check if session already exists.
      if ($session->get('SavedQuiz')) {
        // Get quiz session into an array.
        $savedQuiz = $session->get('SavedQuiz');

        if (is_array($savedQuiz)) {
          foreach ($savedQuiz as $key => $value) {
            $nid_array = explode("_", $key);
            $nid = (is_array($nid_array))? end($nid_array): '';

            $savedQuizTitle = str_replace("_A100", "", str_replace("_", " ", str_replace("_" . $nid, "", str_replace("save_quiz_", "", $key))));

            if ((trim(strtolower($savedQuizTitle)) == trim(strtolower($nodeTitle))) && ((isset($value->user) && $value->user == 'owner'))) {
              $field_quiz_link = $row->_entity->get('field_quiz_link');
              $field_value = $field_quiz_link->getValue();

              // Current item is available in sessions => remove new quiz link and replace with the existing link.
              $quizLink = strtolower(str_replace(" ", "_", trim($nodeTitle)));
              if ($quizLink !== "abilities_quiz") {
                $quizLink = str_replace("_", "-", $quizLink);
              }

              $query = \Drupal::database()->select('node', 'n')
                ->fields('n', ['nid', 'type'])
                ->fields('sf', ['instance_id', 'entity_id']);
              $query->leftJoin('forms_steps_workflow', 'sf', 'sf.entity_id = n.nid');
              $query->condition('n.uuid', $value->uuid);
              $results = $query->execute()->fetchAll();

              $instance_id = $results[0]->instance_id;
              $entity_id = $results[0]->entity_id;
              // work_values_quiz.
              $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $results[0]->type);
              $total_fields = 0;
              foreach ($fields as $field_name => $field_definition) {
                if (!empty($field_definition->getTargetBundle())) {
                  if ($field_definition->getType() == "work_bc_quiz") {
                    $total_fields++;
                  }
                }
              }
              // Get Last Field Name.
              foreach ($fields as $field_name => $field_definition) {
                if (!empty($field_definition->getTargetBundle())) {
                  if ($field_definition->getType() == "work_bc_quiz") {
                    if (str_contains($field_name, "_" . $total_fields)) {
                      // Get Last Fields & Table Name.
                      $last_field = $field_name;
                    }
                  }
                }
              }
              $step = ceil($total_fields / 5);
              // Print $results[0]->type;.
              $results[0]->type = str_replace("multiple_intelligence_quiz", "multiple_intelligences_quiz", $results[0]->type);

              $query2 = \Drupal::database()->select('forms_steps_workflow', 'n')->fields('n', ['step'])->condition("n.forms_steps", $results[0]->type)->condition('n.entity_id', $results[0]->nid)->orderBy('id', 'DESC');
              $results2 = $query2->execute()->fetchAll();
              $lastStep = count($results2);
              // Print $lastStep ."-". $step;.
              $quiz_type = str_replace("_", "-", $results[0]->type);
              if (($lastStep < $step) && ($lastStep > 0)) {
                $field_value[0]['uri'] = "internal:/quiz/" . $quiz_type . "/step" . ($lastStep + 1) . '/' . $results[0]->instance_id;
                $field_value[0]['title'] = 'Continue Quiz';
                $row->_entity->get('nid')->setValue(0, TRUE);
              }
              else {
                if ($lastStep == $step) {
                  $checkLastValue = \Drupal::database()
                    ->select("node__" . $last_field, 'n')
                    ->fields('n', [$last_field . '_ar_target_id'])
                    ->condition("n.entity_id", $results[0]->nid);
                  $results3 = $checkLastValue->execute()->fetchCol();

                  if (empty($results3[0])) {
                    $field_value[0]['uri'] = "internal:/quiz/" . $quiz_type . "/step" . ($lastStep) . '/' . $results[0]->instance_id;
                    $field_value[0]['title'] = 'Continue Quiz';
                    $row->_entity->get('nid')->setValue(0, TRUE);
                  }
                  else {
                    $field_value[0]['uri'] = "internal:/quiz/$quizLink/step1/preview/" . $instance_id;
                    $field_value[0]['title'] = 'Modify Your Answers';
                    $row->_entity->get('nid')->setValue($entity_id, TRUE);
                  }
                }
                else {
                  $field_value[0]['uri'] = "internal:/quiz/$quizLink/step1/preview/" . $instance_id;
                  $field_value[0]['title'] = 'Modify Your Answers';
                  $row->_entity->get('nid')->setValue($entity_id, TRUE);
                }
              }
              /* else if(($lastStep == $step) && ($lastStep > 0)){
              $field_value[0]['uri'] = "internal:/quiz/" . $quiz_type . "/step" . ($lastStep) . '/' . $results[0]->instance_id;
              $field_value[0]['title'] = 'Continue Quiz';
              $row->_entity->get('nid')->setValue(0, TRUE);
              }
              else {
              $field_value[0]['uri'] = "internal:/quiz/$quizLink/step1/preview/" . $instance_id;
              $field_value[0]['title'] = 'Modify Your Answers';
              $row->_entity->get('nid')->setValue($entity_id, TRUE);
              } */

              if ($nid == "A100") {
                $field_value[0]['title2'] = t("Continue Quiz");
              }
              else {
                $field_value[0]['title2'] = t("View Your Results");
              }
              $row->_entity->get('field_quiz_link')->setValue($field_value, TRUE);

            }
            else {
              $field_value[0]['title2'] = t("Take The Quiz");
            }
          }
        }
      }
      else {
        // Print "no sessions";.
      }
      $result[$k] = $row;
      $filteredResults[] = $result;
    }
    /*
    foreach ($filteredResults as $key => $row) {
      $row->index = $key;
    }
    */
    $view->result = $result;
    $view->total_rows = count($filteredResults);

  }
  // This view is for pagination. It gets Bundle and Entity type using uuid of steps forms.
  elseif ($view->id() == 'step_form_pagination') {
    $results = $view->result;
    $filteredResults = [];

    $bundle = $results[0]->_entity->get('bundle')->value;
    // $entity_type = $results[0]->_entity->get('entity_type')->value;
    $instance_id = $results[0]->_entity->get('instance_id')->value;

    $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $bundle);
    $total_fields = 0;
    $current_path = \Drupal::service('path.current')->getPath();
    $path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

    foreach ($fields as $field_definition) {
      if (!empty($field_definition->getTargetBundle())) {
        if ($field_definition->getType() == "work_bc_quiz") {
          $total_fields++;
        }
      }
    }

    // $newPath = str_replace("step1","step".$j, $path);
    $results[0]->_entity->get('bundle')->setValue($path);
    $results[0]->_entity->get('entity_type')->setValue(ceil($total_fields / 10));
    // $results[0]->_entity->get('entity_type')->setValue($j);
    $result[0] = $results[0];
    $filteredResults[] = $result;

    /*
    foreach ($filteredResults as $key => $row) {
      $row->index = $key;
    }
    */
    $view->result = $result;
    $view->total_rows = count($filteredResults);
  }
}
/**
 * Implements hook_validation_constraint_alter().
 */
function work_bc_quiz_validation_constraint_alter(array &$definitions) {
  if (isset($definitions['EntityChanged'])) {
    $definitions['EntityChanged']['class'] = 'Drupal\work_bc_quiz\Plugin\Validation\Constraint\CustomEntityChangedConstraint';
  }
}

/**
 * {@inheritdoc}
 */
function work_bc_quiz_cron(){
  $site_settings = \Drupal::service('site_settings.loader');
  $settings = $site_settings->loadAll();
  $quizLifespanHours = (isset($settings['cron_settings']['cron'])) ? $settings['cron_settings']['cron'] : 24;
  $quiz_types = ['abilities_quiz', 'work_preferences_quiz', 'interests_quiz', 'multiple_intelligences_quiz', 'learning_styles_quiz', 'work_values_quiz'];
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $query = \Drupal::entityQuery('node')->accessCheck(FALSE)
    ->condition('created', strtotime('-'.$quizLifespanHours.' hour'), '<=')
    ->condition('type', $quiz_types, 'IN');
  $nids = $query->execute();
  if (!empty($nids)) {
    $nodes = $storage_handler->loadMultiple($nids);
    $storage_handler->delete($nodes);
  }
}
/**
 * {@inheritdoc}
 */
function _work_bc_quiz_node_form_pagination_handler($form, &$form_state) {
  $trigger = $form_state->getTriggeringElement();
  $current_path = \Drupal::service('path.current')->getPath();
  $action = $trigger['#title'];

  $path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  $pattern = '/step[0-99]/';
  $path = preg_replace($pattern, "step$action", $path);

  $target_url = \Drupal::service('path.validator')->getUrlIfValid($path);
  $target_route_name = $target_url->getRouteName();
  $target_route_parameters = $target_url->getrouteParameters();
  $form_state->setRedirect($target_route_name, $target_route_parameters);
  _save_node_form_data($form, $form_state);

}

/**
 * {@inheritdoc}
 */
function _work_bc_quiz_node_form_submit_next($form, &$form_state) {
  _save_node_form_data($form, $form_state, 'next_page');
}

/**
 * {@inheritdoc}
 */
function _work_bc_quiz_node_form_submit_previous($form, &$form_state) {
  _save_node_form_data($form, $form_state, "previous");
}

/**
 * Custom submit handler.
 */
function _work_bc_quiz_custom_submit_handler($form, &$form_state) {
  $nid = $form_state->getformObject()->getEntity()->id();
  $uid = \Drupal::currentUser()->id();
  $session = \Drupal::request()->getSession();
  $entity_comparison_list = $session->get("career_comparison_$nid" . "_$uid");
  if(isset($entity_comparison_list) && !empty($entity_comparison_list)){
    $session->set("career_comparison_$nid" . "_$uid", null);
  }
  $form_state->setRedirect('entity.node.canonical', ['node' => $nid]);
}

/**
 * Save node form date.
 */
function _save_node_form_data($form, $form_state, $action = '', $para = NULL) {
  if ($action == 'previous') {
    $values = $form_state->getUserInput();
  }
  else {
    $values = $form_state->getValues();
  }
  $nid = $form_state->getformObject()->getEntity()->id();
  $errorCount = 0;
  foreach ($values as $field => $values) {
    if (strpos($field, "field_") === 0) {
      if (isset($values[0]['ar_target_id']) && !empty($values[0]['ar_target_id'])) {
        // $table = "node__" . $field;
        $table2 = "node_revision__" . $field;
        $field_name = $field . "_ar_target_id";

        $query2 = \Drupal::database()->update($table2)->fields([$field_name => $values[0]['ar_target_id']])->condition('entity_id', $nid, '=');
        $query2->execute();
      }
      else {
        $errorCount++;
      }
    }
  }

  if ($action == 'next_page') {
    FormsStepsAlter::setNextRoute($form, $form_state);
  }
  elseif ($action == 'previous') {
    if ($errorCount == 0) {
      $current_path = \Drupal::service('path.current')->getPath();
      if (!str_contains($current_path, 'preview')) {
        $entity = explode('/', $current_path);
        $instance_id = end($entity);
        array_pop($entity);
        $currentStep = str_replace("step", '', end($entity));
        $form_mode = "step_" . $currentStep;

        $route = \Drupal::routeMatch();
        $route_name = $route->getRouteName();
        $formsStepsManager = \Drupal::service('forms_steps.manager');

        /** @var \Drupal\forms_steps\Entity\Workflow $workflowManager */
        $nextRoute = $formsStepsManager->getNextStepRoute($route_name);
        $nextRoute = explode('.', $nextRoute);
        // $step =  end($nextRoute);
        array_pop($nextRoute);
        $step = end($nextRoute) . '_' . $form_mode;

        $query = \Drupal::database()->select('forms_steps_workflow', 'n')->fields('n', ['id'])->condition('n.entity_id', $nid)->condition('n.step', $step)->execute();
        $result = $query->fetchObject();
        if (empty($result)) {
          $connection = \Drupal::service('database');
          $result = $connection->insert('forms_steps_workflow')->fields([
            'instance_id' => $instance_id,
            'entity_type' => 'node',
            'bundle' => end($nextRoute),
            'entity_id' => $nid,
            'form_mode' => 'node.' . $form_mode,
            'forms_steps' => end($nextRoute),
            'step' => $step,
            'created' => \Drupal::time()->getRequestTime(),
            'changed' => \Drupal::time()->getRequestTime(),
            'user_id' => 0,
            'langcode' => 'en',
          ])->execute();
        }
      }
    }
    FormsStepsAlter::setPreviousRoute($form, $form_state);
  }
  // $response = new RedirectResponse(\Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString());
  // $response->send();
}

/**
 * {@inheritdoc}
 */
function _work_bc_quiz_node_form_submit_cancel($form, &$form_state) {
  $nid = $form_state->getformObject()->getEntity()->id();
  $query = \Drupal::database()->select('node', 'n')->fields('n', ['type'])->condition('n.nid', $nid)->execute();
  $result = $query->fetchObject();

  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $result->type);
  foreach ($fields as $field_name => $field_definition) {
    if (!empty($field_definition->getTargetBundle())) {
      if ($field_definition->getType() == "work_bc_quiz") {
        $table = "node__" . $field_name;
        $table2 = "node_revision__" . $field_name;
        $field = $field_name . "_ar_target_id";

        $query = \Drupal::database()->select($table, 'n')->fields('n', [$field])->condition('n.entity_id', $nid)->execute();
        $result = $query->fetchObject();

        $query2 = \Drupal::database()->update($table2)->fields([$field => $result->$field])->condition('entity_id', $nid, '=');
        $query2->execute();
      }
    }
  }
  $response = new RedirectResponse(Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString());
  $response->send();
}

/**
 * {@inheritdoc}
 */
function _work_bc_quiz_usort2($a, $b) {
  if ($a->percentage == $b->percentage) {
    return strcmp($a->Career, $b->Career);
  }
  return ($b->percentage - $a->percentage);
}

/**
 * {@inheritdoc}
 */
function _work_bc_quiz_usort3($a, $b) {
  if ($a['percentage'] == $b['percentage']) {
    return strcmp($a['weight'], $b['weight']);
  }
  return ($b['percentage'] - $a['percentage']);
}
