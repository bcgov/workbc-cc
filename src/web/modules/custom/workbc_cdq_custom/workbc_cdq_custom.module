<?php

use Drupal\webform\Entity\WebformSubmission;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\config_ignore\ConfigIgnoreConfig;

function quizzesList() {
  $forms = \Drupal::entityTypeManager()->getStorage('webform')->loadMultiple();
  return array_reduce($forms, function($quizzes, $form) {
    if (str_ends_with($form->id(), '_quiz')) {
      $quizzes[$form->id()] = $form->get('title');
    }
    return $quizzes;
  }, []);
}

function getCurrentQuiz() {

  $valid_paths = ['webform', 'quizzes'];

  $path = \Drupal::service('path.current')->getPath();
  $path = explode("/", $path);
  if (isset($path[1]) && $path[1] == "compare-careers") {
    $submission = WebformSubmission::load($path[2]);
    $quiz['id'] = $submission->getWebform()->id();
    $quiz['page'] = "compare";
  }
  else if (isset($path[2])) {
    $path[2] = str_replace('-', '_', $path[2]);
    if (in_array($path[1], $valid_paths) && array_key_exists($path[2], quizzesList())) {
      $quiz['id'] = $path[2];
      if ($path[1] == 'webform') {
        $quiz['page'] = 'quiz';
      }
      else {
        $quiz['page'] = 'results';
      }
    }
  }
  return isset($quiz) ? $quiz : false;
}


function getSubmissionOverrides($webform_id, $current_submission) {
  // Inject answers from URL query if found.
  $answers_override = \Drupal::request()->get('answers');
  if (empty($answers_override)) {
    return false;
  }

  // Check whether current user has permission to override answers.
  if (!canOverrideQuizAnswers()) {
    \Drupal::messenger()->addError(t(
      'Current user cannot override quiz answers. Ignoring.'
    ));
    return false;
  }

  /** @var \Drupal\webform\WebformInterface $quiz */
  $quiz = \Drupal::entityTypeManager()->getStorage('webform')->load($webform_id);

  // Check override length;
  $questions = array_filter($quiz->getElementsInitializedAndFlattened(), function($question) {
    return $question['#type'] === 'radios';
  });
  if (strlen($answers_override) != count($questions)) {
    \Drupal::messenger()->addError(t(
      'Answers override has wrong length @len, expecting @exp. Ignoring.',
      ['@len' => strlen($answers_override), '@exp' => count($questions)]
    ));
    return false;
  }

  // Populate answers, checking option validity.
  $submission = [];
  $answers = [];
  foreach (array_keys($questions) as $i => $k) {
    $answer_index = intval($answers_override[$i]);
    if ($answer_index > count($questions[$k]['#options'])) {
      \Drupal::messenger()->addError(t(
        'Answer for question @question has invalid value @value, expecting 0-@max. Ignoring.',
        ['@question' => $i, '@value' => $answer_index, '@max' => count($questions[$k]['#options'])-1]
      ));
      return false;
    }
    $options_keys = array_keys($questions[$k]['#options']);
    $submission[$k] = strval($options_keys[$answer_index]);
    $answers[$k] = $questions[$k]['#options'][$options_keys[$answer_index]];
  }

  // Ignore if answers didn't change.
  if ($current_submission && $current_submission->getData() == $submission) {
    \Drupal::messenger()->addWarning(t(
      'Answers override is the same as current submission. Ignoring.'
    ));
    return false;
  }

  // Return overridden answers.
  \Drupal::messenger()->addMessage(t(
    'Answers override in effect:<br><pre>@answers</pre>', ['@answers' => print_r($answers, true)]
  ));
  return $submission;
}


function getUserSubmission($webform_id, $skip_overrides = false) {

  $current_user = \Drupal::currentUser();

  $session = \Drupal::request()->getSession();
  $token_session = $session->get($webform_id.'_token')?: "";

  $token_url = \Drupal::request()->get('token');

  if ($token_url) {
    $token = $token_url;
  }
  else {
    $token = $token_session;
  }
  $query = \Drupal::entityQuery('webform_submission')
    ->condition('token', $token)
    ->condition('webform_id', $webform_id)
    ->range(0, 1)
    ->sort('changed', 'DESC')
    ->accessCheck(false);
  $results = $query->execute();

  if ($results) {
    $sid = array_shift($results);
    $submission = WebformSubmission::load($sid);
  }

  // Check for answers override.
  if (!$skip_overrides && (empty($token_url) || $token_url === $token_session)) {
    $override = getSubmissionOverrides($webform_id, @$submission);
    if ($override) {
      $new_submission = WebformSubmission::create([
        'webform_id' => $webform_id,
        'data' => $override,
        'notes' => 'Created by overridden answers.'
      ]);
      $new_submission->save();

      if ($new_submission->id()) {
        if (!empty($sid)) {
          \Drupal::entityTypeManager()->getStorage('webform_submission')->delete(
            \Drupal::entityTypeManager()->getStorage('webform_submission')->loadMultiple([$sid])
          );
        }
        return $new_submission;
      }
    }
  }
  return $submission ?? false;
}


function workbc_cdq_custom_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {

  if ($entity->getEntityTypeId() === "webform") {
    if ($operation == "submission_page") {
      $webform_id = $entity->id();

      $token_url = \Drupal::request()->get('token');
      $session = \Drupal::request()->getSession();
      $token_session = $session->get($webform_id.'_token')?: "";

      if ($token_url && $token_url <> $token_session) {
        return \Drupal\Core\Access\AccessResult::forbidden();
      }
    }
  }
  return \Drupal\Core\Access\AccessResult::neutral();
}


function workbc_cdq_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  if ($view->storage->get('id') == "quiz_career_match") {
    $query->orderby[] = [
      'field' => 'node_field_data_workbc_cdq_career_match.title',
      'direction' => 'ASC'
    ];
  }
}


function workbc_cdq_custom_config_ignore_ignored_alter(&$ignoreConfig) {
  $override = \Drupal::config('config_ignore.settings');
  if (!empty($override)) {
    try {
      $ignoreConfig = ConfigIgnoreConfig::fromConfig($override);
    }
    catch (\Throwable $e) {
      \Drupal::logger('workbc')->error('Invalid value for config_ignore.settings override. Ignoring.');
    }
  }
}
