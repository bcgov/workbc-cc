<?php

use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Entity\WebformSubmission;

define ("NEW_LINE", "%0D%0A");

/**
* Implements hook_page_attachments_alter().
*/
function workbc_cdq_career_match_page_attachments_alter(array &$attachments) {
	$attachments['#attached']['library'][] = 'workbc_cdq_career_match/workbc-cdq-career-match';
}

/**
* Implements hook_theme().
*/
function workbc_cdq_career_match_theme($existing, $type, $theme, $path) {
  return [
    'views_view_table__quiz_career_match' => [
      'template' => 'views/views-view-table--quiz_career_match',
      'base hook' => 'view',
    ],
    'views_view_field__quiz_career_match__selected' => [
      'template' => 'views/views-view-field--quiz_career_match--selected',
      'base hook' => 'view'
    ],
    'views_view_fields__cdq_compare_careers__page' => [
      'template' => 'views/views-view-fields--cdq_compare_careers--page',
      'base hook' => 'view'
    ],
    'views_view_fields__cdq_compare_careers__page' => [
      'template' => 'views/views-view-fields--cdq_compare_careers--page',
      'base hook' => 'view'
    ],
    'workbc_cdq_quiz_results_categories' => [
      'template' => 'workbc-cdq-quiz-results-categories',
      'base hook' => 'page',
      'variables' => [
        'quiz_link' => '',
        'category_top' => '',
        'category_all' => '',
        'category' => '',
        'email_subject' => '',
        'email_body' => '',
        'score' => NULL
      ]
    ],
    'workbc_cdq_quiz_results_work_values' => [
      'template' => 'workbc-cdq-quiz-results-work-values',
      'base hook' => 'page',
      'variables' => [
        'quiz_link' => '',
        'category_top' => '',
        'category_all' => '',
        'category' => '',
        'email_subject' => '',
        'email_body' => '',
        'score' => NULL
      ]
    ]

  ];
}

/**
* Implements hook_preprocess_views_view_table().
*/
function workbc_cdq_career_match_preprocess_views_view_table(&$variables) {

  $view = $variables['view'];
  if ($view->id() === "quiz_career_match") {
    foreach ($variables['result'] as $key => $result) {
      $node = $result->_relationship_entities['nid'];
      $variables['rows'][$key]['raw'] = getCareerProfileInfo($node);
      $variables['submission_id'] = $variables['view']->args[0];
      $variables['workbc_url'] = \Drupal::config('workbc')->get('workbc_url');
    }
    $quiz = getCurrentQuiz();
    $variables['quiz'] = workbc_cdq_quiz_info($quiz['id']);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function workbc_cdq_career_match_views_pre_render($view) {
  if ($view->id() === 'quiz_career_match') {
    $quiz = getCurrentQuiz();
    if ($quiz['id'] === 'interests_quiz') {
      $view->field['career_match']->options['label'] = 'Your Match';
    }
  }
}

/**
* Implements hook_preprocess_views_view_field().
*/
function workbc_cdq_career_match_preprocess_views_view_field(&$variables) {

  if ($variables['view']->id() === "quiz_career_match" && $variables['field']->realField === "selected") {
    $variables['career_match_id'] = $variables['row']->id;
  }
  if ($variables['view']->id() === "quiz_career_match" && $variables['field']->realField === "career_match") {
    $value = $variables['field']->getValue($variables['row']);
    $output = $variables['field']->advancedRender($variables['row']);
    $output = str_replace($value, round($value, 0), $output);
    $variables['output'] = $output;
  }
}


/**
* Implements hook_template_preprocess_views_view().
*/
function workbc_cdq_career_match_preprocess_views_view(&$variables) {

  if ($variables['id'] == 'cdq_compare_careers') {
    $view = $variables['view'];
    $id = $view->args[0];
    $submission = WebformSubmission::load($id);

    $variables['email_subject'] = "WorkBC's Career Discovery Quizzes - Compare Careers";
    $variables['email_body'] = compare_email_body($submission);
  }
}


/**
* Implements hook_preprocess_views_view_fields().
*/
function workbc_cdq_career_match_preprocess_views_view_fields(&$variables) {

  $node = $variables['row']->_relationship_entities['nid'];
  $info = getCareerProfileInfo($node);
  $variables['raw'] = $info;
  $variables['workbc_url'] = \Drupal::config('workbc')->get('workbc_url');
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function workbc_cdq_career_match_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
  if (str_starts_with($route_name, 'entity.webform_submission.') && $route_name !== 'entity.webform_submission.collection') {
    /** @var \Drupal\webform\Entity\WebformSubmission $entity */
    $entity = \Drupal::routeMatch()->getParameter('webform_submission');
    if ($entity) {
      $quiz = $entity->getWebform();
      $data['tabs'][0][] = [
        '#theme' => 'menu_local_task',
        '#link' => [
          'title' => t('Results'),
          'url' => Url::fromRoute("workbc_cdq_custom.{$quiz->id()}_results", ['token' => $entity->getToken()]),
        ],
        '#active' => false,
        '#weight' => 15,
        '#access' => true,
      ];
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function workbc_cdq_career_match_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'webform_submission') {
    /** @var \Drupal\webform\Entity\WebformSubmission $entity */
    $quiz = $entity->getWebform();
    $operations['results'] = [
      'title' => t('Results'),
      'weight' => 25,
      'url' => Url::fromRoute("workbc_cdq_custom.{$quiz->id()}_results", ['token' => $entity->getToken()]),
    ];
  }
}

/**
 * Implements hook_webform_third_party_settings_form_alter().
 */
function workbc_cdq_career_match_webform_third_party_settings_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $form_state->getFormObject()->getEntity();

  // Ignore for non-quiz webforms.
  if (!str_ends_with($webform->id(), '_quiz')) return;

  $form['third_party_settings']['workbc_cdq_career_match'] = [
    '#type' => 'details',
    '#title' => t('WorkBC CDQ settings'),
    '#open' => TRUE,
  ];
  $vocabularies = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->loadMultiple();
  $form['third_party_settings']['workbc_cdq_career_match']['categories'] = [
    '#type' => 'select',
    '#title' => t('Quiz categories'),
    '#description' => t('The categories that apply to the questions of this quiz.'),
    '#required' => true,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'categories'),
    '#options' => array_reduce(array_keys($vocabularies), function($options, $key) use($vocabularies) {
      $options[$key] = $vocabularies[$key]->get('name');
      return $options;
    }, [])
  ];

  $form['third_party_settings']['workbc_cdq_career_match']['time'] = [
    '#type' => 'textfield',
    '#title' => t('Time'),
    '#description' => t('The typical time it takes to fill this quiz.'),
    '#required' => true,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'time'),
  ];

  $form['third_party_settings']['workbc_cdq_career_match']['description'] = [
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Short description for this quiz.'),
    '#required' => true,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'description'),
  ];

  $form['third_party_settings']['workbc_cdq_career_match']['subtitle'] = [
    '#type' => 'textarea',
    '#title' => t('Quiz page subtitle'),
    '#description' => t('Short description for display on quiz page.'),
    '#required' => true,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'subtitle'),
  ];

  $form['third_party_settings']['workbc_cdq_career_match']['results_subtitle'] = [
    '#type' => 'textarea',
    '#title' => t('Quiz results page subtitle'),
    '#description' => t('Short description for display on quiz results page.'),
    '#required' => true,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'results_subtitle'),
  ];

  $form['third_party_settings']['workbc_cdq_career_match']['top_text'] = [
    '#type' => 'textfield',
    '#title' => t('Quiz results top categories header'),
    '#description' => t('Quiz results category header for top categories.'),
    '#required' => false,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'top_text'),
  ];

  $form['third_party_settings']['workbc_cdq_career_match']['all_text'] = [
    '#type' => 'textfield',
    '#title' => t('Quiz results all categories header'),
    '#description' => t('Quiz results category header for all categories.'),
    '#required' => false,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'all_text'),
  ];
}

/**
 * Implements hook_webform_element_default_properties_alter().
 */
function workbc_cdq_career_match_webform_element_default_properties_alter(array &$properties, array &$definition) {
  // Add custom data property to all webform elements.
  // Setting the custom property to an empty string makes the corresponding
  // element defined via hook_webform_element_configuration_form_alter()
  // automatically visible.
  $properties['category'] = '';
}

/**
 * Implements hook_webform_element_translatable_properties_alter().
 */
function workbc_cdq_career_match_webform_element_translatable_properties_alter(array &$properties, array &$definition) {
  // Make the custom data property translatable.
  $properties[] = 'category';
}

/**
 * Implements hook_webform_element_configuration_form_alter().
 */
function workbc_cdq_career_match_webform_element_configuration_form_alter(&$form, FormStateInterface $form_state) {
  // If you want add element properties to specific element type, you can use
  // the below code to the current element's type and more.
  /** @var Drupal\webform_ui\Form\WebformUiElementEditForm $form_object */
  $form_object = $form_state->getFormObject();
  $element_plugin = $form_object->getWebformElementPlugin();
  $element_label = $element_plugin->getPluginLabel();
  $element_type = $element_plugin->getTypeName();
  $webform = $element_plugin->getWebform();
  $settings = $webform->get('third_party_settings');

  // Ignore other than radios elements.
  if ($element_type !== 'radios') return;

  // Append custom properties details container and textfield element.
  $t_args = [
    '@label' => $element_label,
    '@type' => $element_type,
  ];
  $form['workbc_cdq_career_match'] = [
    '#type' => 'details',
    '#title' => t('WorkBC CDQ properties'),
    '#description' => t('Properties related to WorkBC CDQ.'),
    '#open' => TRUE,
    '#weight' => -10,
  ];
  $form['workbc_cdq_career_match']['category'] = [
    '#type' => 'select',
    '#title' => t('Question category'),
    '#description' => t('The category to which this question belongs.', $t_args),
    '#required' => true,
    '#options' => array_reduce(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($settings['workbc_cdq_career_match']['categories']), function($options, $term) {
      $options[$term->name] = $term->name;
      return $options;
    })
  ];
}

/*************************** HELPER FUNCTIONS ***************************/

function getCareerProfileInfo(\Drupal\node\NodeInterface $node) {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  $noc = $node->field_noc_2016->value;
  $image_uri =  'theme://' . $active_theme . '/assets/profiles/' . $noc . '-NOC-profile.png';
  if ($image_uri) {
    $style = ImageStyle::load('career_profile_preview');
    $image_url = $style->buildUrl($image_uri);
  }

  // Get the job openings date range from the SSOT schema.
  $job_openings_range = \Drupal::state()->get('workbc.ssot_job_openings_range', '');
  if (empty($job_openings_range)) {
    $result = ssot('');
    if ($result) {
      $schema = json_decode($result->getBody(), true);
      $label = $schema['definitions']['career_provincial']['properties']['expected_job_openings_10y']['description'];
      preg_match('#\{(.*?)\}#', $label, $matches);
      if (!empty($matches)) {
        $job_openings_range = $matches[1];
        \Drupal::state()->set('workbc.ssot_job_openings_range', $job_openings_range);
      }
    }
  }

  $term = $node->field_education_level->referencedEntities();
  $info = array(
    'title' => $node->title->value . " (NOC " . $node->field_noc->value . ")",
    'noc' => $node->field_noc->value,
    'job_summary' => substr(strip_tags($node->body->value), 0, 400),
    'video_id' => $node->field_video_id->value,
    'image' => $image_url,
    'annual_salary' => $node->field_annual_salary->value ?? 'Not available',
    'education_level' => $term[0]->getName(),
    'job_openings' => $node->field_job_openings->value ?? 'Not available',
    'job_openings_range' => $job_openings_range,
  );

  return $info;
}

function getSubmissionScore(WebformSubmission $submission) {
  $quiz = $submission->getWebform();
  $questions = array_filter($quiz->getElementsInitializedAndFlattened(), function($question) {
    return $question['#type'] === 'radios';
  });
  $answers = $submission->getData();
  $settings = $quiz->get('third_party_settings');
  $categories = array_reduce(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($settings['workbc_cdq_career_match']['categories']), function($categories, $category) {
    $categories[$category->name] = [
      'score' => 0,
      'count' => 0,
      'term' => $category,
      'name' => $category->name,
      'answers' => [],
    ];
    return $categories;
  });
  $answer_string = '';
  foreach ($questions as $key => $question) {
    $category = $question['#category'];
    $value = $answers[$key];
    $score = floatval($value);
    $categories[$category]['score'] += $score;
    $categories[$category]['count'] += 1;
    $categories[$category]['answers'][$key] = [
      'value' => $value,
      'title' => $questions[$key]['#title']
    ];
    $answer_string .= strval(array_search($value, array_keys($question['#options'])));
  }
  if (\Drupal::currentUser()->hasPermission('override quiz answers')) {
    $url = Url::fromRoute('<current>', [
      'answers' => $answer_string,
    ], ['absolute' => true]);
    \Drupal::messenger()->addMessage(t(
      'To reuse the current set of answers, use the following URL:<br><code>@url</code>',
      ['@url' => $url->toString()]
    ));
  }
  foreach ($categories as &$category) {
    switch ($quiz->id()) {
      case 'work_values_quiz':
        // Do nothing.
        break;
      case 'multiple_intelligences_quiz':
      case 'learning_styles_quiz':
        $category['percent'] = round($category['score']);
        $category['normalized'] = floor($category['score'] / $category['count']) + 1;
        break;
      default:
        $category['percent'] = round(100 * $category['score'] / ($category['count'] * 4));
        $category['normalized'] = floor($category['score'] / $category['count']) + 1;
        break;
    }
  }
  if ($quiz->id() !== 'work_values_quiz') {
    array_multisort(
      array_column($categories, 'percent'), SORT_DESC,
      array_column($categories, 'name'), SORT_ASC,
      $categories
    );
  }
  return $categories;
}

const COLUMN_ABILITIES_NOC=0;
const COLUMN_ABILITIES_GLA=1;
const COLUMN_ABILITIES_VA=2;
const COLUMN_ABILITIES_NA=3;
const COLUMN_ABILITIES_SP=4;
const COLUMN_ABILITIES_FP=5;
const COLUMN_ABILITIES_CP=6;
const COLUMN_ABILITIES_MC=7;
const COLUMN_ABILITIES_FD=8;
const COLUMN_ABILITIES_MD=9;
const COLUMN_ABILITIES_MATCH=10;

const COLUMN_WORK_PREFERENCES_NOC=0;
const COLUMN_WORK_PREFERENCES_CODE=1;

function matchAbilitiesCareers($submission, $score) {
  // 1. Load abilities-quiz.csv category weights.
  $abilities_weights = \Drupal::state()->get('workbc.abilities_weights', []);
  if (empty($abilities_weights)) {
    $abilities_weights = array_map('str_getcsv', file(__DIR__ . '/scoring/abilities-quiz.csv'));
    \Drupal::state()->set('workbc.abilities_weights', $abilities_weights);
  }

  // 2. Normalize category weights according to incoming category scores.
  // 3. Compute career matches.
  $mapCategories = [
    COLUMN_ABILITIES_GLA => 'General Learning Ability',
    COLUMN_ABILITIES_VA => 'Verbal Ability',
    COLUMN_ABILITIES_NA => 'Numerical Ability',
    COLUMN_ABILITIES_SP => 'Spatial Perception',
    COLUMN_ABILITIES_FP => 'Form Perception',
    COLUMN_ABILITIES_CP => 'Clerical Perception',
    COLUMN_ABILITIES_MC => 'Motor Co-ordination',
    COLUMN_ABILITIES_FD => 'Finger Dexterity',
    COLUMN_ABILITIES_MD => 'Manual Dexterity',
  ];
  array_walk($abilities_weights, function(&$row) use($score, $mapCategories) {
    $total = 0;
    foreach ($mapCategories as $column => $category) {
      $adjusted_weight = abs($score[$category]['normalized'] - (6 - intval($row[$column])));
      $row[$column] = $adjusted_weight;
      $total += $adjusted_weight;
    }
    $row[COLUMN_ABILITIES_MATCH] = round(100 * (36 - $total) / 36);
  });

  // 4. Return top 20 unique results.
  usort($abilities_weights, function($r1, $r2) {
    return $r2[COLUMN_ABILITIES_MATCH] - $r1[COLUMN_ABILITIES_MATCH];
  });
  $results = array_reduce($abilities_weights, function($results, $row) {
    if (count($results) < 20 && !array_key_exists($row[COLUMN_ABILITIES_NOC], $results)) {
      $results[$row[COLUMN_ABILITIES_NOC]] = $row;
    }
    return $results;
  }, []);
  return array_map(function($row) {
    return [
      'noc' => $row[COLUMN_ABILITIES_NOC],
      'match' => $row[COLUMN_ABILITIES_MATCH]
    ];
  }, $results);
}

function matchInterestsCareers($submission, $score) {
  // 1. Query O*NET API for the matches.
  /** @var Drupal\workbc_cdq_career_match\Services\OnetWebService **/
  $onet = \Drupal::service('workbc_cdq.onet');
  $credentials = \Drupal::config('workbc')->get('onet');
  $onet->set_auth($credentials['username'], $credentials['password']);
  $answers = array_reduce($submission->getData(), function($answer_string, $answer) {
    return $answer_string . strval($answer + 1);
  }, '');
  $matches = $onet->call('mnm/interestprofiler/careers', [
    'answers' => $answers,
    'end' => 1000,
  ]);
  if (!empty($matches->error)) {
    \Drupal::logger('workbc_cdq')->error('Request to O*NET career match failed with error: @error', [
      '@error' => $matches->error,
    ]);
    \Drupal::messenger()->addError(t(
      'An error ocurred while trying to find matching careers. Please report this error to a system administrator.',
    ));
    return;
  }

  // 2. Load O*NET to NOC concordance map.
  $onet_nocs = \Drupal::state()->get('workbc.onet_nocs', []);
  if (empty($onet_nocs)) {
    $json = json_decode(file_get_contents(__DIR__ . '/scoring/onet_nocs.json'));
    $onet_nocs = array_reduce($json, function($onet_nocs, $entry) {
      $soc2019 = $entry->soc2019;
      if (array_key_exists($soc2019, $onet_nocs)) {
        $onet_nocs[$soc2019][] = $entry->noc2021;
      }
      else {
        $onet_nocs[$soc2019] = [$entry->noc2021];
      }
      return $onet_nocs;
    }, []);
    \Drupal::state()->set('workbc.onet_nocs', $onet_nocs);
  }

  // 3. Lookup NOC careers for each O*NET SOC match, breaking at 20 results.
  $results = [];
  $values = [
    'Best' => 100,
    'Great' => 75,
    'Good' => 50,
  ];
  foreach ($matches->career as $match) {
    foreach ($onet_nocs[$match->code] as $noc) {
      if (!array_key_exists($noc, $results)) {
        $results[$noc] = [
          'noc' => $noc,
          'match' => $values[$match->fit],
        ];

        // Abort when we have 20 results.
        if (count($results) >= 20) break 2;
      }
    }
  }
  return array_values($results);
}

function matchWorkPreferencesCareers($submission, $score) {
  // 1. Load work-preferences-quiz.csv category matches.
  $work_preferences_matches = \Drupal::state()->get('workbc.work_preferences_matches', []);
  if (empty($work_preferences_matches)) {
    $work_preferences_matches = array_map('str_getcsv', file(__DIR__ . '/scoring/work-preferences-quiz.csv'));
    $work_preferences_matches = array_combine(
      array_map(function($match) { return $match[COLUMN_WORK_PREFERENCES_NOC]; }, $work_preferences_matches),
      $work_preferences_matches
    );
    \Drupal::state()->set('workbc.work_preferences_matches', $work_preferences_matches);
  }

  // 2. Generate permutations for top categories in specified order.
  //    Each permutation is a 3-letter code made up of the first letter of each category.
  //    Each number in the permutation represents the Nth category from the top.
  //    Then, for each code, we generate 3 more versions: UUU, UUl, Ull where U = uppercase, l = lowercase.
  //
  // 3. Lookup careers matches for each permutation and calculate match score.
  $terms = array_keys($score);
  $results = [];
  foreach(['123', '132', '213', '231', '312', '321', '124', '142', '214'] as $permutation_index => $permutation) {
    $raw_code = array_reduce(str_split($permutation), function($code, $digit) use($terms) {
      $code .= $terms[intval($digit)-1][0];
      return $code;
    }, '');
    foreach (['UUU', 'UUl', 'Ull'] as $case_permutation_index => $case_permutation) {
      $flip_code = array_reduce(str_split($case_permutation), function($code, $case) use($raw_code) {
        $letter = $raw_code[strlen($code)];
        $code .= $case === 'U' ? strtoupper($letter) : strtolower($letter);
        return $code;
      }, '');

      // The match score is a normalization formula lifted from legacy CDQ because it's not coded in the original quiz sheet.
      // It is proportional to the rank of the current permutation.
      $index = $permutation_index * strlen($permutation) + $case_permutation_index;
      $score = round((180 - $index) / 180 * 100);
      $results = array_merge($results, array_map(function($match) use($score) {
        return [
          'noc' => $match[COLUMN_WORK_PREFERENCES_NOC],
          'match' => $score,
        ];
      }, array_filter($work_preferences_matches, function($match) use($flip_code) {
        return $match[COLUMN_WORK_PREFERENCES_CODE] == $flip_code;
      })));

      // Abort when we have 20 results.
      if (count($results) >= 20) break 2;
    }
  }

  return $results;
}

function matchCareers(WebformSubmission $submission, $score) {
  switch ($submission->getWebform()->id()) {
    case 'abilities_quiz':
      return matchAbilitiesCareers($submission, $score);
    case 'work_preferences_quiz':
      return matchWorkPreferencesCareers($submission, $score);
    case 'interests_quiz':
      return matchInterestsCareers($submission, $score);
    default:
      \Drupal::logger('workbc_cdq')->warning('Request to match careers for quiz @quiz. Ignoring.', [
        '@quiz' => $submission->getWebform()->id()
      ]);
      break;
  }
  return [];
}

function results_email_body($submission) {

  $id = $submission->getWebform()->id();
  $quiz_name = $submission->getWebform()->get('title');

  $options = [
    'absolute' => TRUE,
    'https' => TRUE,
  ];
  $home_link = Url::fromRoute('<front>', [], $options)->toString();

  $options['query'] = ['token' => $submission->getToken()];
  $results_link = Url::fromUri('route:workbc_cdq_custom.' . $id . '_results', $options)->toString();

  $body = "You recently took the ". $quiz_name . ". Access your results for 14 days at: " . $results_link;
  $body .= NEW_LINE . NEW_LINE;
  $body .= "Print your results if you'd like to keep them for longer than 14 days.";
  $body .= NEW_LINE . NEW_LINE;
  $body .= "Learn more about yourself! Complete other quizzes to find what careers might be the best fit for you: " . $home_link;
  $body .= NEW_LINE . NEW_LINE;
  $body .= "Discover more career and education resources at https://www.workbc.ca.";

  return $body;
}


function compare_email_body($submission) {

  $id = $submission->getWebform()->id();

  $options = [
    'absolute' => TRUE,
    'https' => TRUE,
  ];
  $home_link = Url::fromRoute('<front>', [], $options)->toString();
  $compare_link = $home_link . "compare-careers/" . $submission->id();


  $body = "View your compared careers: " . $compare_link;
  $body .= NEW_LINE . NEW_LINE;
  $body .= "WorkBC's Career Discovery Quizzes help you learn more about your preferences and discover careers that suit you.";

  return $body;
}
