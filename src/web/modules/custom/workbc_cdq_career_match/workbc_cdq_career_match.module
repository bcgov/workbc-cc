<?php

use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormStateInterface;

/**
* Implements hook_page_attachments_alter().
*/
function workbc_cdq_career_match_page_attachments_alter(array &$attachments) {
	$attachments['#attached']['library'][] = 'workbc_cdq_career_match/workbc-cdq-career-match';
}

/**
* Implements hook_theme().
*/
function workbc_cdq_career_match_theme($existing, $type, $theme, $path) {
  return [      
    'views_view_table__quiz_career_match' => [
      'template' => 'views/views-view-table--quiz_career_match',
      'base hook' => 'view'
    ],
    'views_view_field__quiz_career_match__selected' => [
      'template' => 'views/views-view-field--quiz_career_match--selected',
      'base hook' => 'view'
    ],
    'views_view_fields__cdq_compare_careers__page' => [
      'template' => 'views/views-view-fields--cdq_compare_careers--page',
      'base hook' => 'view'
    ],

  ];
}

/**
* Implements hook_preprocess_views_view_table().
*/
function workbc_cdq_career_match_preprocess_views_view_table(&$variables) {

  $view = $variables['view'];
  if ($view->id() == "quiz_career_match") {
    foreach ($variables['result'] as $key => $result) {
      $node = $result->_relationship_entities['nid'];
      $variables['rows'][$key]['raw'] = getCareerProfileInfo($node);
      $variables['submission_id'] = $variables['view']->args[0];
      // TODO Replace with same config setting as current CDQ.
      $variables['workbc_url'] = rtrim("https://devnoc.workbc.ca", "/");
    }
  }
}

/**
* Implements hook_preprocess_views_view_field().
*/
function workbc_cdq_career_match_preprocess_views_view_field(&$variables) {

  if ($variables['view']->id() === "quiz_career_match" && $variables['field']->realField === "selected") {
    $variables['career_match_id'] = $variables['row']->id;
  }
  if ($variables['view']->id() === "quiz_career_match" && $variables['field']->realField === "career_match") {
    $value = $variables['field']->getValue($variables['row']);
    $output = $variables['field']->advancedRender($variables['row']);
    $output = str_replace($value, round($value, 0), $output);
    $variables['output'] = $output;
  }
}

/**
* Implements hook_preprocess_views_view_fields().
*/
function workbc_cdq_career_match_preprocess_views_view_fields(&$variables) {

  $node = $variables['row']->_relationship_entities['nid'];
  $info = getCareerProfileInfo($node);
  $variables['raw'] = $info;
  // TODO Replace with same config setting as current CDQ.
  $variables['workbc_url'] = rtrim("https://devnoc.workbc.ca", "/");
}

/**
 * Implements hook_webform_third_party_settings_form_alter().
 */
function workbc_cdq_career_match_webform_third_party_settings_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $form_state->getFormObject()->getEntity();

  // Ignore for non-quiz webforms.
  if (!str_ends_with($webform->id(), '_quiz')) return;

  $form['third_party_settings']['workbc_cdq_career_match'] = [
    '#type' => 'details',
    '#title' => t('WorkBC CDQ settings'),
    '#open' => TRUE,
  ];
  $vocabularies = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->loadMultiple();
  $form['third_party_settings']['workbc_cdq_career_match']['categories'] = [
    '#type' => 'select',
    '#title' => t('Quiz categories'),
    '#description' => t('The categories that apply to the questions of this quiz.'),
    '#required' => true,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'categories'),
    '#options' => array_reduce(array_keys($vocabularies), function($options, $key) use($vocabularies) {
      $options[$key] = $vocabularies[$key]->get('name');
      return $options;
    }, [])
  ];

  $form['third_party_settings']['workbc_cdq_career_match']['time'] = [
    '#type' => 'textfield',
    '#title' => t('Time'),
    '#description' => t('The typical time it takes to fill this quiz.'),
    '#required' => true,
    '#default_value' => $webform->getThirdPartySetting('workbc_cdq_career_match', 'time'),
    '#options' => array_reduce(array_keys($vocabularies), function($options, $key) use($vocabularies) {
      $options[$key] = $vocabularies[$key]->get('name');
      return $options;
    }, [])
  ];
}

/**
 * Implements hook_webform_element_default_properties_alter().
 */
function workbc_cdq_career_match_webform_element_default_properties_alter(array &$properties, array &$definition) {
  // Add custom data property to all webform elements.
  // Setting the custom property to an empty string makes the corresponding
  // element defined via hook_webform_element_configuration_form_alter()
  // automatically visible.
  $properties['category'] = '';
}

/**
 * Implements hook_webform_element_translatable_properties_alter().
 */
function workbc_cdq_career_match_webform_element_translatable_properties_alter(array &$properties, array &$definition) {
  // Make the custom data property translatable.
  $properties[] = 'category';
}

/**
 * Implements hook_webform_element_configuration_form_alter().
 */
function workbc_cdq_career_match_webform_element_configuration_form_alter(&$form, FormStateInterface $form_state) {
  // If you want add element properties to specific element type, you can use
  // the below code to the current element's type and more.
  /** @var Drupal\webform_ui\Form\WebformUiElementEditForm $form_object */
  $form_object = $form_state->getFormObject();
  $element_plugin = $form_object->getWebformElementPlugin();
  $element_label = $element_plugin->getPluginLabel();
  $element_type = $element_plugin->getTypeName();
  $webform = $element_plugin->getWebform();
  $settings = $webform->get('third_party_settings');

  // Ignore other than radios elements.
  if ($element_type !== 'radios') return;

  // Append custom properties details container and textfield element.
  $t_args = [
    '@label' => $element_label,
    '@type' => $element_type,
  ];
  $form['workbc_cdq_career_match'] = [
    '#type' => 'details',
    '#title' => t('WorkBC CDQ properties'),
    '#description' => t('Properties related to WorkBC CDQ.'),
    '#open' => TRUE,
    '#weight' => -10,
  ];
  $form['workbc_cdq_career_match']['category'] = [
    '#type' => 'select',
    '#title' => t('Question category'),
    '#description' => t('The category to which this question belongs.', $t_args),
    '#required' => true,
    '#options' => array_reduce(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($settings['workbc_cdq_career_match']['categories']), function($options, $term) {
      $options[$term->name] = $term->name;
      return $options;
    })
  ];
}

/*************************** HELPER FUNCTIONS ***************************/

function getCareerProfileInfo(\Drupal\node\NodeInterface $node) {

  global $base_url;

  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  
  $theme = \Drupal::theme()->getActiveTheme();
  $noc = $node->field_noc_2016->value;
  $image_uri =  'theme://' . $active_theme . '/assets/profiles/' . $noc . '-NOC-profile.png';
  if ($image_uri) {
    $style = ImageStyle::load('career_profile_preview');
    $image_url = $style->buildUrl($image_uri);
  }

  $term = $node->field_education_level->referencedEntities();
  $info = array(
    'title' => $node->title->value . " (NOC " . $node->field_noc->value . ")",
    'noc' => $node->field_noc->value,
    'job_summary' => substr(strip_tags($node->body->value), 0, 400),
    'video_id' => $node->field_video_id->value,
    'image' => $image_url,
    'annual_salary' => $node->field_annual_salary->value,
    'education_level' => $term[0]->getName(),
    'job_openings' => $node->field_job_openings->value,
    'job_openings_range' => '(1995 - 2005)',
  );

  return $info;
}

function getSubmissionScore($submission) {
  $quiz = $submission->getWebform();
  $questions = array_filter($quiz->getElementsInitializedAndFlattened(), function($question) {
    return $question['#type'] === 'radios';
  });
  $answers = $submission->getData();
  $settings = $quiz->get('third_party_settings');
  $categories = array_reduce(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($settings['workbc_cdq_career_match']['categories']), function($categories, $category) {
    $categories[$category->name] = [
      'score' => 0,
      'count' => 0,
      'term' => $category,
    ];
    return $categories;
  });
  $results = [];
  $answer_string = '';
  foreach ($questions as $key => $question) {
    $category = $question['#category'];
    $value = $answers[$key];
    $score = floatval($value);
    $categories[$category]['score'] += $score;
    $categories[$category]['count'] += 1;
    $results[$category] = $score;
    $answer_string .= strval(array_search($value, array_keys($question['#options'])));
  }
  if (\Drupal::currentUser()->hasPermission('override quiz answers')) {
    $url = Url::fromRoute('<current>', ['answers' => $answer_string], ['absolute' => true]);
    \Drupal::messenger()->addMessage(t(
      'To reuse the current set of answers, use the following URL:<br><code>@url</code>',
      ['@url' => $url->toString()]
    ));
  }
  foreach ($categories as &$category) {
    $category['percent'] = round(100 * $category['score'] / ($category['count'] * 4));
    $category['normalized'] = floor($category['score'] / $category['count']) + 1;
  }
  uasort($categories, function($c1, $c2) {
    return $c2['percent'] - $c1['percent'];
  });
  return [
    'categories' => $categories,
    'answers' => $results,
  ];
}

const COLUMN_ABILITIES_NOC=0;
const COLUMN_ABILITIES_GLA=1;
const COLUMN_ABILITIES_VA=2;
const COLUMN_ABILITIES_NA=3;
const COLUMN_ABILITIES_SP=4;
const COLUMN_ABILITIES_FP=5;
const COLUMN_ABILITIES_CP=6;
const COLUMN_ABILITIES_MC=7;
const COLUMN_ABILITIES_FD=8;
const COLUMN_ABILITIES_MD=9;
const COLUMN_ABILITIES_MATCH=10;

function matchAbilitiesCareers($submission, $score) {
  // 1. Load abilities-quiz.csv category weights.
  $abilities_weights = \Drupal::state()->get('workbc.abilities_weights', []);
  if (empty($abilities_weights)) {
    $abilities_weights = array_map('str_getcsv', file(__DIR__ . '/scoring/abilities-quiz.csv'));
    \Drupal::state()->set('workbc.abilities_weights', $abilities_weights);
  }

  // 2. Normalize category weights according to incoming category scores.
  // 3. Compute career matches.
  $mapCategories = [
    COLUMN_ABILITIES_GLA => 'General learning ability',
    COLUMN_ABILITIES_VA => 'Verbal ability',
    COLUMN_ABILITIES_NA => 'Numerical ability',
    COLUMN_ABILITIES_SP => 'Spatial perception',
    COLUMN_ABILITIES_FP => 'Form perception',
    COLUMN_ABILITIES_CP => 'Clerical perception',
    COLUMN_ABILITIES_MC => 'Motor co-ordination',
    COLUMN_ABILITIES_FD => 'Finger dexterity',
    COLUMN_ABILITIES_MD => 'Manual dexterity',
  ];
  array_walk($abilities_weights, function(&$row) use($score, $mapCategories) {
    $total = 0;
    foreach ($mapCategories as $column => $category) {
      $adjusted_weight = abs($score['categories'][$category]['normalized'] - (6 - $row[$column]));
      $row[$column] = $adjusted_weight;
      $total += $adjusted_weight;
    }
    $row[COLUMN_ABILITIES_MATCH] = round(100 * (36 - $total) / 36);
  });

  // 4. Return top results > 70% as NOCs.
  $results = array_filter($abilities_weights, function($row) {
    return $row[COLUMN_ABILITIES_MATCH] > 70;
  });
  usort($results, function($r1, $r2) {
    return $r2[COLUMN_ABILITIES_MATCH] - $r1[COLUMN_ABILITIES_MATCH];
  });
  $seen = [];
  $results = array_filter($results, function($row) use(&$seen) {
    if (array_key_exists($row[COLUMN_ABILITIES_NOC], $seen)) return false;
    $seen[$row[COLUMN_ABILITIES_NOC]] = true;
    return true;
  });
  return array_map(function($row) {
    return [
      'noc' => $row[COLUMN_ABILITIES_NOC],
      'match' => $row[COLUMN_ABILITIES_MATCH]
    ];
  }, $results);
}

function matchInterestsCareers($submission, $score) {
  return [];
}

function matchWorkPreferencesCareers($submission, $score) {
  return [];
}
